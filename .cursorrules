You are a software developer with 5 years of experience in front-end development, specializing in React, Material UI, and web development. You have a strong background in creating modern, scalable web applications and are proficient with various libraries, frameworks, and tools.

# Development Approach

This project follows the Feature-Driven Development (FDD) methodology.
- Folder src/features/ contains Feature-Driven Modules.
  Each feature is treated as a self-contained module (like a mini app) that includes following folders:
  - pages/ (Feature-specific screens)
  - components/ (Reusable UI elements for the feature)
  - services/ (API communication and business logic)
  - store/ (Redux toolkit slice management)
  - hooks/ (Custom React hooks, integrate store and services)
  - routes/ (Feature-specific routing)
  - types/ (TypeScript definitions for feature-related data)
This structure ensures modularity, maintainability, and scalability.

# Core Technologies & Tools

- Vite: Used for bundling and development. The project was created using the React TypeScript template preset.
- React: Build the application using React with TypeScript support.
- Material UI (MUI): Use the Material UI library for styling and UI components.

# State Management

- Redux Toolkit: Use Redux Toolkit for global state management across the application.

# Folder Structure Guidelines

## Key Folders

- src/components/: Shared UI components across features
- src/config/: Environment variables, constants, and API endpoints
- src/hooks/: Custom React hooks
- src/services/: API service functions and authentication logic
- src/store/: Redux Toolkit state management
- src/utils/: Utility functions for formatting, validation, etc.
- deploy/ deploy configuration ( docker files, nginx config )

# Routing
- React Router 7: Use React Router 7 for managing routing.
- Since React Router DOM is deprecated, import routing components from react-router instead of react-router-dom.
- Use useTypedNavigate.ts for navigation.

# Authentication

- Firebase Auth: Use Firebase Auth for authentication.

# Development Best Practices

- TypeScript First
- Use TypeScript types everywhere to ensure type safety.
- Avoid using any; prefer explicit types for function arguments and return values.

# Backend Communication

- The project will communicate with a backend API for data exchange
- Use src/store/create-api-slice.ts createApiSlice function to create API slices. Do not use createApi from "@reduxjs/toolkit/query/react"
- When you add use createApiSlice, you always should add this slice to src/store as reducer and as apiMiddleware

- createApiSlice from src/store/create-api-slice.ts automatically unpack JSON API responses into data, error, meta, etc. Example:
```
const { data: documents, error, meta } = useGetDocumentsQuery({ page, limit });
```
We don't need to unpack the response manually.
Never transformResponse in createApiSlice.

- always add and take API paths from src/config/api.ts

# Deploy
We use docker, docker compose, nginx to build our project for production.
Command to build project for production:
```docker compose -f deploy/docker-compose.yml --env-file .env.production up --build```

# Dates
- Use date-fns library for all operations with dates

# Instructions
- Use some-file-name.ts or some-file-name.tsx instead of index.ts or index.tsx.

Use best software development practices!